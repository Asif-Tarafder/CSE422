# -*- coding: utf-8 -*-
"""cse422 Lab01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fW2AFJuaqxBl8XjP-ai44kisn5kGvuXT
"""

def A_star_search(start,end,heuristic,graph):
  open_set = set([start]) #set is used so that no value gets repeared,#all valie gets added here even the ones ex[anded]
  closed_set = set([])

  actual_cost = {}  #
  actual_cost[start] = 0 #siince no cost start a

  parents = {} #to find parents of the nodes, finding path
  parents[start] = start

  while len(open_set) > 0: #jotokhon open_set empty naa
    n = None #will be expanded , the least values gets inserted , who will be expanded #gets out of fringe

    for v in open_set: #karay openkorbo from the frieng
      if n == None or actual_cost[v] + heuristic[v] < actual_cost[n] + heuristic[n]:
        n = v;       ## A+A < B+B

    if n == None:
      return('NO PATH FOUND')

    if n == end:
      path = []
      #print(parents)
      while parents[n]!=n:
        path.append(n)
        n = parents[n]

      path.append(start)
      path.reverse()
      return([path,actual_cost[end]])
##############################################################################################################################

    for (m, dis) in  graph[n]: #m = kotjay jaitesi from one node # dis = kototuk disrance

        if (m not in open_set) and (m not in closed_set):
          open_set.add(m)
          parents[m] = n # who is parent of m? == n
          actual_cost[m] = actual_cost[n] + dis #new node cost = before cost of new distance

        else:
          if actual_cost[m] > actual_cost[n] + dis: # onno way dyea kom laglay update
            actual_cost[m] = actual_cost[n] + dis
            parents[m] = n

            if m in closed_set:
              closed_set.remove(m)
              open_set.add(m)

    open_set.remove(n)
    closed_set.add(n)
  return('NO PATH FOUND')
##########################################################################################################################################
def heuristic_create(f):
  rd = f.readlines()
  d = {}
  h = {}

  ltr={"Arad":"A","Bucharest":"Z","Craiova":"S","Eforie":"T","Fagaras":"O",
      "Giurgiu":"I","Dobreta":"V","Hirsova":"N","lasi":"Q","Lugoj":"G","Mehadia":"L",
      "Neamt":"F","Oradea":"B","Pitesti":"P","RimnicuVilcea":"R","Sibiu":"U",
      "Timisoara":"C","Urziceni":"D","Vaslui":"H","Zerind":"E"}

  for line in rd: ##CREATING HEURISTIC

    l = line.strip().split(" ") # ['Arad','366',]
    h[ltr[l[0]]] = int(l[1])

    for val in range(2,len(l),2):
      if ltr[l[0]] in d:
        d[ltr[l[0]]] = d[ltr[l[0]]] + [(ltr[l[val]],int(l[val+1]))]
      else:
        d[ltr[l[0]]] = [(ltr[l[val]],int(l[val+1]))]

  return([d,h])

########################################################################################################################################

def output(path,d,cost):

  symbol={"A":"Arad","Z":"Bucharest","S":"Craiova","T":"Eforie","O":"Fagaras","I":"Giurgiu","V":"Dobreta","N":"Hirsova","Q":"lasi","G":"Lugoj",
          "L":"Mehedia", "F":"Neamt","B":"Orodea","P":"Pitesti","R":"RimnicuVilcea","U":"Sibiu","C":"Timisoara","D":"Urziceni","H":"Vaslui","E":"Zerind"}

  for i in path:
    if i==path[-1]:
      print(symbol[i],end="")
    else:
      print(symbol[i],end=" -> ")

  print()

  print("Total distance:",cost,"km")

#################################################################################################################################################################################

f = open("/content/astar.txt")
d,h = heuristic_create(f)
path,cost = A_star_search("A","Z",h,d) ##path
#print("Path:",path)
output(path,d,cost)