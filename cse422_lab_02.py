# -*- coding: utf-8 -*-
"""CSE422_LAB-02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VI6Xr5Adwvy7wfbfkIcYhqMXgftdf6EF
"""

#snigdha
import random
####################################################
def fitness_function(population,run,t):
  fitness=[]
  b=True
  for i in population:
    total=0
    for x in range(len(i)):
      if i[x]==1:
        total+=run[x]
    fitness.append(total)
   # print(i,total)
    if total==t:
      b=False
      #print(lst)
      return(i)
  if b==True:
    return("No")
######################################################
def GA(population,fit,t,run):
  got=False
  for i in range(5000):
    new_p=[]

    for p in range(len(population)):
      x=select(population)
      y=select(population)

      child1,child2=cross_over(x,y)
      best_child=Mutate(child1,child2)
      new_p.append(best_child)

    population=new_p
    fit=fitness_function(population,run,t)
    #print(fit,"fgh")
    if fit!="No":
      print(fit)
      got=True
      break
  if got==False:
    print(-1)


##############################################

def Mutate(child1,child2):
    l=random.randint(0,len(child1)-1)
    v=random.randint(0,1)
    child1[l]=v
    child2[l]=v
    lst=[child1,child2]
    r=random.randint(0,1)
    return lst[r]

#######################################################
def cross_over(x,y):
  half=random.randint(0,len(x)-1)
  a=x[0:half+1]+y[half+1:]
  b=y[0:half+1]+x[half+1:]
  return a,b

######################################################
def select(population):
  return(population[random.randint(0,len(population)-1)])

###################################################
input_file=open("/content/input.txt")
bat=[]
run=[]
n,t=input_file.readline().strip().split(" ")
t=int(t)
n=int(n)
for i in range(n):
  l=input_file.readline().strip().split(" ")
  bat.append(l[0])
  run.append(int(l[1]))

##################################################
population=[]
for i in range(12):
  c=[]
  for i in range(n):
    x=random.randint(0,1)
    c.append(x)
  population.append(c)
print(bat)
#print(run)
#############################################
fit=fitness_function(population,run,t)
#print(fit,"fgh")
if fit!="No":
  print(fit)
  #for z in
else:
  #print(fit)
  GA(population,fit,t,run)
#############################################



#Nahar

import random

def population(num_players):
  popl = []

  for i in range(12):
    ls = []

    for j in range(int(num_players)):
      a = random.randint(0,1)
      ls.append(a)
    popl.append(ls)
  #print(popl)
  return popl

def fitness(popl,target,ls_run):

  fit = []
  for i in range(len(popl)):
    p = popl[i]
    sum = 0

    for j in range(len(p)):
      if p[j] == 1:
        sum = sum + ls_run[j]

    if sum == target:
      a = p + [sum]
      return a

    #print(sum)
    fit.append(sum)

  return(fit)

def genetic_algorithm(popln,ls_run,target):
  flag=0
  for i in range(5000):
    new_popl = []
    for j in range(len(popln)):
      one = popln[random.randint(0,len(popln)-1)]
      two = popln[random.randint(0,len(popln)-1)]
      l = crossover(one,two)
      #print(l)
      c1 = l[0]
      c2 = l[1]
      m = mutation(c1,c2)
      new_popl.append(m)


    fitn = fitness(new_popl,target,ls_run)
    if fitn[-1] == target:
      for player in range(0,len(fitn)-1):
        print(fitn[player],end="")
      flag=1
      break
    else:
      popln = new_popl
  if flag==0:
    print(-1)

def crossover(one,two):
  divide_point = random.randint(0,len(one))
  c1 = one[0:divide_point]+two[divide_point:]
  c2 = two[0:divide_point]+one[divide_point:]
  #print(c1,c2,"fghj")
  return([c1,c2])

def mutation(c1,c2):
  idx = random.randint(0,len(c1)-1)

  c1[idx] = random.randint(0,1)
  c2[idx] = random.randint(0,1)
  choose_child = random.randint(0,1)
  if choose_child == 0:
    return c1
  else:
    return c2

######################################################################################
f = open("/content/gen.txt")
first_line = f.readline().strip().split(" ")
num_players,target = first_line
target=int(target)
num_players=int(num_players)
ls_name = []
ls_run = []

for i in range(int(num_players)):
  lines = f.readline().strip().split(" ")
  name,run = lines
  ls_name.append(name)
  ls_run.append(int(run))

print(ls_name)
#print(ls_run)

popln = population(num_players)
#print(popln)
fitn = fitness(popln,target,ls_run)
#print(fitn)

if fitn[-1] == target:
  for player in range(0,len(fitn)-1):
    print(fitn[player],end="")

else:
  #print(fitn)
  genetic_algorithm(popln,ls_run,target)



# Mota bhai
import random
####################################################
def fitness_function(population,run,t):
  fitness=[]
  fitness_pass="No"
  for i in population:
    total=0
    for x in range(len(i)):
      if i[x]==1:
        total+=run[x]
    fitness.append(total)
   # print(i,total)
    if total==t:
      fitness_pass="Yes"
      #print(lst)
      return(i)
  if fitness_pass="No":
    return("No")
######################################################
def GA(population,fit,t,run):
  got=False
  for i in range(5000):
    new_p=[]

    for p in range(len(population)):
      x=select(population[random.randint(0,len(population)-1)])
      y=select(population[random.randint(0,len(population)-1)])

      child1,child2=cross_over(x,y)
      best_child=Mutate(child1,child2)
      new_p.append(best_child)

    population=new_p
    fit=fitness_function(population,run,t)
    #print(fit,"fgh")
    if fit!="No":
      print(fit)
      got=True
      break
  if got==False:
    print(-1)


##############################################

def Mutate(child1,child2):
    l=random.randint(0,len(child1)-1)
    v=random.randint(0,1)
    child1[l]=v
    child2[l]=v
    lst=[child1,child2]
    r=random.randint(0,1)
    return lst[r]

#######################################################
def cross_over(x,y):
  half=random.randint(0,len(x)-1)
  a=x[0:half+1]+y[half+1:]
  b=y[0:half+1]+x[half+1:]
  return a,b

###################################################
input_file=open("/content/input.txt")
bat=[]
run=[]
n,t=input_file.readline().strip().split(" ")
t=int(t)
n=int(n)
for i in range(n):
  l=input_file.readline().strip().split(" ")
  bat.append(l[0])
  run.append(int(l[1]))

##################################################
population=[]
for i in range(12):
  c=[]
  for i in range(n):
    x=random.randint(0,1)
    c.append(x)
  population.append(c)
print(bat)

#############################################
fit=fitness_function(population,run,t)

if fit=="No":
  print(fit)

else:
  GA(population,fit,t,run)
#############################################

# Mota bhai BANK problem
import random
####################################################
def fitness_function(population,tranjection,client,goal=0):
  fitness=[]
  fitness_pass="No"
  for i in population:
    if i==[0,0,0,0,0,0,0]:
      continue
    total=0 # 0000000
    for x in range(len(i)):
      if i[x]==1 and tranjection[x]!=0:
        total+=tranjection[x]
    fitness.append(total)
    #print(i,total)
    if total==goal:
      fitness_pass="Yes"
      #print(lst)
      return(i)
  if fitness_pass=="No":
    return("No")
######################################################
def GA(population,tranjection,client):
  got=False
  for i in range(5000):
    new_p=[]

    for p in range(len(population)):
      x=population[random.randint(0,len(population)-1)]
      y=population[random.randint(0,len(population)-1)]

      child1,child2=cross_over(x,y)
      best_child=Mutate(child1,child2)
      new_p.append(best_child)

    population=new_p
    fit=fitness_function(population,tranjection,client)
    #print(fit,"fgh")
    if fit!="No" and 1 in fit:
      for i in fit:
        print(i,end="")
      got=True
      break
  if got==False:
    print(-1)


##############################################

def Mutate(child1,child2):
    l=random.randint(0,len(child1)-1)
    v=random.randint(0,1)
    child1[l]=v
    child2[l]=v
    lst=[child1,child2]
    r=random.randint(0,1)
    return lst[r]

#######################################################
def cross_over(x,y):
  half=random.randint(0,len(x)-1)
  a=x[0:half+1]+y[half+1:]
  b=y[0:half+1]+x[half+1:]
  return a,b

###################################################
input_file=open("/content/input.txt")
tranjection = []
client = input_file.readline().strip()
client = int(client)

for i in range(client):
  typ, tk = input_file.readline().strip().split(" ")
  if typ=="l":
    tranjection.append(-1*(float(tk)))
  else:
    tranjection.append(float(tk))

##################################################
population=[]
for i in range(12):
  c=[]
  for i in range(client):
    x=random.randint(0,1)
    c.append(x)
  population.append(c)
#print(population)

#############################################
fit=fitness_function(population,tranjection,client)

if fit!="No":
  #print(fit)
  for i in fit:
    print(i,end="")


else:
  GA(population,tranjection,client)
#############################################