# -*- coding: utf-8 -*-
"""CSE422_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17bqEPG2-_rsZK1P5Kx79PLRRXF0AIxV0
"""

#Task-1
input_file = open("/content/input (1).txt")
line=input_file.readlines()

# Creating my Matrix
matrix=[]
for row in line:
  row=row.strip()
  row=row.split(" ")
  l=[]
  for i in row:
    if i=="N":
      l.append(0)
    elif i=="Y":
      l.append(1)
  matrix.append(l)
#print(matrix)
#-------------------------------#

#---Finding Affected area by DFS---#

def DFS(row,col,matrix):

  c_start=None
  c_end=None
  r_start=None
  r_end=None
  if col>=1:
    c_start=col-1
  else:
    c_start=col
  if col==len(matrix[row])-1:
    c_end=col+1
  else:
    c_end=col+2

  if row>=1:
    r_start=row-1
  else:
    r_start=row

  if row==len(matrix)-1:
    r_end=row+1
  else:
    r_end=row+2

  affected=1
  for i in range(r_start,r_end):
    for j in range(c_start,c_end):
      #print("row=",i,"  col=",j)
      #print(matrix[r_start][c_start:c_end])
      if matrix[i][j]==1:
        matrix[i][j]=0

        #matrix
        #for m in matrix:
        #  print(m)
        ##################
       # print("affedted",affected)
        affected+=DFS(i,j,matrix)
        #print("affedted",affected)


  #matrix
  #for m in matrix:
  #  print(m)
  ##################
  return(affected)

####################################################


l_area=[]
affected=0
for row in range(len(matrix)):
  for col in range(len(matrix[row])):
    if matrix[row][col]==1:
      #affected+=1
      matrix[row][col]=0
      area=DFS(row,col,matrix)
      l_area.append(area)
      affected=0

print(max(l_area))
input_file.close()

#TASK-2
input_file = open("/content/Question2 input1.txt")
line=input_file.readlines()
#print(int(line[0].strip()))
matrix=[]
for i in range(2,int(line[0].strip())+2):
  l=line[i].strip().split(" ")
  matrix.append(l)
#print(matrix)


def BFS(matrix,Q):

  l=Q.pop(0)
  #print(Q,"ghj")
  #print(l)
  q=[]
  time=1
  #print(Q,"gh")
  for i in l:
    r,c=i
    if r>0 and r<len(matrix)-1:
      if c>0 and c<len(matrix[r])-1:
        if matrix[r-1][c]=="H":
          matrix[r-1][c]="A"
          q.append([r-1,c])
        if  matrix[r+1][c]=="H":
          matrix[r+1][c]="A"
          q.append([r+1,c])
        if matrix[r][c-1]=="H":
          matrix[r][c-1]="A"
          q.append([r,c-1])
        if matrix[r][c+1]=="H":
          matrix[r][c+1]="A"
          q.append([r,c+1])

      elif c==0:
        if matrix[r-1][c]=="H":
          matrix[r-1][c]="A"
          q.append([r-1,c])
        if matrix[r+1][c]=="H":
          matrix[r+1][c]="A"
          q.append([r+1,c])
        if matrix[r][c+1]=="H":
          matrix[r][c+1]="A"
          q.append([r,c+1])

      elif c==len(matrix[r])-1:
        if matrix[r-1][c]=="H" :
          matrix[r-1][c]="A"
          q.append([r-1,c])
        if matrix[r+1][c]=="H":
          matrix[r+1][c]="A"
          q.append([r+1,c])
        if matrix[r][c-1]=="H" :
          matrix[r][c-1]="A"
          q.append([r,c-1])


    elif r==0:
      if c>0 and c<len(matrix[r])-1:
        if  matrix[r+1][c]=="H":
          matrix[r+1][c]="A"
          q.append([r+1,c])
        if matrix[r][c-1]=="H":
          matrix[r][c-1]="A"
          q.append([r,c-1])
        if matrix[r][c+1]=="H":
          matrix[r][c+1]="A"
          q.append([r,c+1])

      elif c==0:
        if matrix[r+1][c]=="H":
          matrix[r+1][c]="A"
          q.append([r+1,c])
        if matrix[r][c+1]=="H":
          matrix[r][c+1]="A"
          q.append([r,c+1])

      elif c==len(matrix[r])-1:
        if matrix[r+1][c]=="H":
          matrix[r+1][c]="A"
          q.append([r+1,c])
        if matrix[r][c-1]=="H" :
          matrix[r][c-1]="A"
          q.append([r,c-1])

    elif r==len(matrix)-1:
      if c>0 and c<len(matrix[r])-1:
        if matrix[r-1][c]=="H":
          matrix[r-1][c]="A"
          q.append([r-1,c])
        if matrix[r][c-1]=="H":
          matrix[r][c-1]="A"
          q.append([r,c-1])
        if matrix[r][c+1]=="H":
          matrix[r][c+1]="A"
          q.append([r,c+1])

      elif c==0:
        if matrix[r-1][c]=="H":
          matrix[r-1][c]="A"
          q.append([r-1,c])
        if matrix[r][c+1]=="H":
          matrix[r][c+1]="A"
          q.append([r,c+1])

      elif c==len(matrix[r])-1:
        if matrix[r-1][c]=="H" :
          matrix[r-1][c]="A"
          q.append([r-1,c])
        if matrix[r][c-1]=="H" :
          matrix[r][c-1]="A"
          q.append([r,c-1])

  #print("Q",Q)
  Q.append(q)
  #print("q",q)
  #print(Q)
  #for i in matrix:
   # print(i)

  if len(Q[0])==0:
    #print("time",time)
    return(time-1)
  time+=BFS(matrix,Q)
  return time




  #print(r,c)
########################################
Q=[]
l=[]
for row in range(len(matrix)):
  for col in range(len(matrix[row])):
    if matrix[row][col]=="A":
      l.append([row,col])
Q.append(l)
#print(Q)
time=BFS(matrix,Q)
print("Time:",time,"minutes")


c=0
for i in matrix:
  if "H" in i:
    c+=i.count("H")
if c==0:
  print("No one survived")
else:
  print(c,"survived")